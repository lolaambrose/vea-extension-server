from html import escape
import json
import os

from platformdirs import user_cache_dir
from logger import logger
import config

from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.filters.command import Command, CommandObject
from datetime import datetime, timedelta, timezone

dp = Dispatcher()


async def start():
    logger.info("starting...")

    global chatbot
    chatbot = Bot(config.TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)

    await dp.start_polling(chatbot)


@dp.message(Command("start"))
async def command_start(message: types.Message):
    await message.reply(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π —á–∞—Ç—Ç–µ—Ä–æ–≤ Vea!</b>"
    )


def convert_timestamp_to_date(timestamp):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —Å–µ–∫—É–Ω–¥—ã
        timestamp = float(timestamp) / 1000
        date_time = datetime.fromtimestamp(timestamp)
        readable_date = date_time.strftime("%Y-%m-%d %H:%M:%S")
        return readable_date
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp: {timestamp}")
        return "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"


async def send_banword_attempt(data: dict):
    banword = escape(data["banword"])
    username = escape(data["username"])
    login_time = convert_timestamp_to_date(data["login_time"])
    for admin in config.TELEGRAM_ADMINS:
        await chatbot.send_message(
            chat_id=admin,
            text=f"‚ö†Ô∏è <b>–ß–∞—Ç—Ç–µ—Ä –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ</b>\n‚îú <code>{banword}</code>\n‚îú <b>–ê–∫–∫–∞—É–Ω—Ç</b> onlyfans.com/{username}\n‚îî <b>–í—Ä–µ–º—è –ª–æ–≥–∏–Ω–∞</b> <code>{login_time}</code>",
        )


async def send_uninstall_attempt(data: dict):
    username = data["username"]
    login_time = convert_timestamp_to_date(data["login_time"])

    for admin in config.TELEGRAM_ADMINS:
        await chatbot.send_message(
            chat_id=admin,
            text=f"ü¶π <b>–ß–∞—Ç—Ç–µ—Ä –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ</b>\n‚îú <b>–ê–∫–∫–∞—É–Ω—Ç</b> onlyfans.com/{username}\n‚îî <b>–í—Ä–µ–º—è –ª–æ–≥–∏–Ω–∞</b> <code>{login_time}</code>",
        )


async def send_long_message(chat_id, text, max_length=4096):
    while text:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É
        part = text[:max_length]
        await chatbot.send_message(chat_id=chat_id, text=part)
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
        text = text[max_length:]


@dp.message(Command("banwords_show"))
async def banwords_show(message: types.Message, command: CommandObject):
    if not message.from_user:
        return

    admin_ids = config.TELEGRAM_ADMINS
    if message.from_user.id not in admin_ids:
        await message.reply("üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
        return

    file = None
    try:
        file = open("banwords.txt", "r")
        banwords = file.read()
        banwords_list = banwords.split()
        formatted_banwords = "\n".join([f"‚îú {word}" for word in banwords_list])
        await send_long_message(
            message.chat.id,
            f"üî¥ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞</b>\n{formatted_banwords}",
        )
    except FileNotFoundError:
        await message.reply("üîé <b>–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
    finally:
        if file:
            file.close()


@dp.message(Command("banwords_upload"))
async def banwords_upload(message: types.Message, command: CommandObject):
    if not message.from_user:
        return

    admin_ids = config.TELEGRAM_ADMINS
    if message.from_user.id not in admin_ids:
        await message.reply("üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
        return

    if not message.document:
        await message.reply("üìÅ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.</b>")
        return

    document_id = message.document.file_id
    file = await chatbot.get_file(document_id)
    file_path = file.file_path

    valid_extensions = [".txt"]
    if file_path is None or not any(
        file_path.endswith(ext) for ext in valid_extensions
    ):
        await message.reply(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>.txt</i>"
        )
        return

    file_contents = await chatbot.download_file(file_path)
    correct_format = False  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    if file_contents:
        content_str = file_contents.read()
        if content_str:
            correct_format = all(
                [
                    word.strip().startswith('"') and word.strip().endswith('"')
                    for word in content_str.decode().split(",")
                ]
            )
        if not correct_format:
            await message.reply(
                '‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.</b> –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>"text1", "text2", "text3"...</code>'
            )
            return

        with open("banwords.txt", "wb") as new_file:
            new_file.write(content_str)
        await message.reply("‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.</b>")
    else:
        await message.reply("üò¢ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.</b>")


@dp.message(Command("add_admin"))
async def add_admin(message: types.Message):
    if not message.from_user or not message.text:
        return

    admin_ids = config.TELEGRAM_ADMINS
    if message.from_user.id not in admin_ids:
        await message.reply("üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
        return

    try:
        new_admin_id = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if new_admin_id and new_admin_id not in admin_ids:
            admin_ids.append(new_admin_id)
            os.environ["TELEGRAM_ADMINS"] = json.dumps(
                admin_ids
            )  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã
            await message.reply(
                f"‚úÖ <b>–ù–æ–≤—ã–π –∞–¥–º–∏–Ω —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</b>"
            )
        else:
            await message.reply(
                "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.</b>"
            )
    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è <b>ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.</b>")


@dp.message(Command("remove_admin"))
async def remove_admin(message: types.Message):
    if not message.from_user or not message.text:
        return

    admin_ids = config.TELEGRAM_ADMINS
    if message.from_user.id not in admin_ids:
        await message.reply("üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
        return

    try:
        admin_id_to_remove = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if admin_id_to_remove and admin_id_to_remove in admin_ids:
            admin_ids.remove(admin_id_to_remove)
            os.environ["TELEGRAM_ADMINS"] = json.dumps(
                admin_ids
            )  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã
            await message.reply(
                f"‚úÖ <b>–ê–¥–º–∏–Ω —Å ID {admin_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>"
            )
        else:
            await message.reply(
                "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤.</b>"
            )
    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è <b>ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.</b>")
